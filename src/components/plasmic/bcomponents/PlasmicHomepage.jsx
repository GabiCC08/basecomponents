// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: jXLoM2GHLBG2mG6Xb1BAum
// Component: MFE_1t2fa8ue
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { BitAutocomplete } from "../../BitAutocomplete"; // plasmic-import: pbYC8ia9w0/codeComponent
import { BitBurger } from "../../BitBurger"; // plasmic-import: uT-BJs_pL6/codeComponent
import { BitButton } from "../../BitButton"; // plasmic-import: nebagr72tu/codeComponent
import { BitCheckbox } from "../../BitCheckbox"; // plasmic-import: RwMVrkX8Li/codeComponent
import { useScreenVariants as useScreenVariantso3DJzPQqTyEwg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: O3DJzPQqTyEWG/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_bcomponents.module.css"; // plasmic-import: jXLoM2GHLBG2mG6Xb1BAum/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: MFE_1t2fa8ue/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

function PlasmicHomepage__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantso3DJzPQqTyEwg()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Base components"
              : "Base components"}
          </h1>

          <div
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div className={classNames(projectcss.all, sty.column__pkn8A)}>
              <BitAutocomplete
                data-plasmic-name={"bitAutocomplete"}
                data-plasmic-override={overrides.bitAutocomplete}
                className={classNames("__wab_instance", sty.bitAutocomplete)}
                data={["opt1", "opt2", "opt3"]}
                fieldValue={"fieldValue"}
                placeholder={"placeholder"}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__uyxWs)}>
              <BitBurger
                data-plasmic-name={"bitBurger"}
                data-plasmic-override={overrides.bitBurger}
                active={false}
                className={classNames("__wab_instance", sty.bitBurger)}
                color={"#6F3B8E"}
                lineHeight={2}
                lineSpacing={5}
                width={26}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__kzGgg)}>
              <BitButton
                data-plasmic-name={"bitButton"}
                data-plasmic-override={overrides.bitButton}
                className={classNames("__wab_instance", sty.bitButton)}
                text={"bit button"}
                toggle={false}
                vName={"primary"}
                vType={"outline"}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__alNno)}>
              <BitCheckbox
                data-plasmic-name={"bitCheckbox"}
                data-plasmic-override={overrides.bitCheckbox}
                checked={false}
                className={classNames("__wab_instance", sty.bitCheckbox)}
                indeterminate={false}
                label={"Checkbox label"}
                position={"After"}
                vName={"primary"}
              />
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "columns",
    "bitAutocomplete",
    "bitBurger",
    "bitButton",
    "bitCheckbox"
  ],

  h1: ["h1"],
  columns: [
    "columns",
    "bitAutocomplete",
    "bitBurger",
    "bitButton",
    "bitCheckbox"
  ],

  bitAutocomplete: ["bitAutocomplete"],
  bitBurger: ["bitBurger"],
  bitButton: ["bitButton"],
  bitCheckbox: ["bitCheckbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    columns: makeNodeComponent("columns"),
    bitAutocomplete: makeNodeComponent("bitAutocomplete"),
    bitBurger: makeNodeComponent("bitBurger"),
    bitButton: makeNodeComponent("bitButton"),
    bitCheckbox: makeNodeComponent("bitCheckbox"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
